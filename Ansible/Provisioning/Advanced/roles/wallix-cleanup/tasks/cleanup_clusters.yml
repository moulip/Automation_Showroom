---
# WALLIX Cleanup - Cluster Configuration Tasks
# Manages cluster cleanup and removal via /api/clusters

- name: "Cleanup | Cluster | Get current cluster information"
  uri:
    url: "{{ wallix_api.base_url }}/api/clusters"
    method: GET
    headers:
      Cookie: "{{ wallix_session_cookie }}"
    validate_certs: "{{ wallix_api.verify_ssl }}"
    timeout: "{{ wallix_api.timeout }}"
    status_code: [200, 404]
  register: current_clusters
  changed_when: false
  failed_when: false

- name: "Cleanup | Cluster | Check if node is part of a cluster"
  set_fact:
    cluster_membership_exists: "{{ current_clusters.status == 200 and (current_clusters.json | length > 0) }}"
    cluster_list: "{{ current_clusters.json | default([]) }}"

- name: "Cleanup | Cluster | Debug cluster information"
  debug:
    msg: 
      - "Cluster membership: {{ cluster_membership_exists }}"
      - "Clusters found: {{ cluster_list | length }}"
      - "Cluster details: {{ cluster_list }}"
  when: wallix_cleanup_debug.enabled | default(false)

- name: "Cleanup | Cluster | Backup cluster configuration"
  copy:
    content: |
      # WALLIX Cluster Configuration Backup
      # Timestamp: {{ ansible_date_time.iso8601 }}
      # Node: {{ inventory_hostname }}
      
      Cluster Membership: {{ cluster_membership_exists }}
      Clusters:
      {{ cluster_list | to_nice_yaml }}
    dest: "{{ wallix_cleanup_backup.directory | default('/tmp') }}/cluster_config_backup_{{ ansible_date_time.epoch }}.yml"
    mode: '0600'
  delegate_to: localhost
  when: 
    - cluster_membership_exists
    - wallix_cleanup_backup.enabled | default(true)

# Leave cluster operations
- name: "Cleanup | Cluster | Leave clusters (dry run)"
  debug:
    msg: "Would leave cluster {{ item.cluster_name }} (ID: {{ item.cluster_id }})"
  loop: "{{ cluster_list }}"
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'dry_run'
    - wallix_cleanup_components.clusters.leave_clusters | default(true)

- name: "Cleanup | Cluster | Leave clusters"
  uri:
    url: "{{ wallix_api.base_url }}/api/clusters/{{ item.cluster_id }}/leave"
    method: POST
    headers:
      Cookie: "{{ wallix_session_cookie }}"
      Content-Type: "application/json"
    body:
      force_leave: "{{ wallix_cleanup_components.clusters.force_leave | default(false) }}"
      cleanup_config: "{{ wallix_cleanup_components.clusters.cleanup_config | default(true) }}"
    body_format: json
    validate_certs: "{{ wallix_api.verify_ssl }}"
    timeout: "{{ wallix_api.timeout | default(60) }}"
    status_code: [200, 204]
  register: cluster_leave_results
  loop: "{{ cluster_list }}"
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'normal'
    - wallix_cleanup_components.clusters.leave_clusters | default(true)

# Destroy cluster operations (only if this node is the primary/creator)
- name: "Cleanup | Cluster | Check for owned clusters"
  set_fact:
    owned_clusters: >-
      {{
        cluster_list | selectattr('node_role', 'equalto', 'primary') | 
        selectattr('cluster_owner', 'equalto', inventory_hostname) | list
      }}
  when: cluster_membership_exists

- name: "Cleanup | Cluster | Destroy owned clusters (dry run)"
  debug:
    msg: "Would destroy cluster {{ item.cluster_name }} (ID: {{ item.cluster_id }})"
  loop: "{{ owned_clusters | default([]) }}"
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'dry_run'
    - wallix_cleanup_components.clusters.destroy_owned_clusters | default(false)

- name: "Cleanup | Cluster | Destroy owned clusters"
  uri:
    url: "{{ wallix_api.base_url }}/api/clusters/{{ item.cluster_id }}"
    method: DELETE
    headers:
      Cookie: "{{ wallix_session_cookie }}"
      Content-Type: "application/json"
    body:
      force_destroy: "{{ wallix_cleanup_components.clusters.force_destroy | default(false) }}"
      notify_members: "{{ wallix_cleanup_components.clusters.notify_members | default(true) }}"
    body_format: json
    validate_certs: "{{ wallix_api.verify_ssl }}"
    timeout: "{{ wallix_api.timeout | default(120) }}"
    status_code: [200, 204]
  register: cluster_destroy_results
  loop: "{{ owned_clusters | default([]) }}"
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'normal'
    - wallix_cleanup_components.clusters.destroy_owned_clusters | default(false)

# Reset cluster configuration
- name: "Cleanup | Cluster | Reset cluster configuration (dry run)"
  debug:
    msg: "Would reset local cluster configuration"
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'dry_run'
    - wallix_cleanup_components.clusters.reset_config | default(true)

- name: "Cleanup | Cluster | Reset cluster configuration"
  uri:
    url: "{{ wallix_api.base_url }}/api/clusters/config/reset"
    method: POST
    headers:
      Cookie: "{{ wallix_session_cookie }}"
    validate_certs: "{{ wallix_api.verify_ssl }}"
    timeout: "{{ wallix_api.timeout }}"
    status_code: [200, 204]
  register: cluster_config_reset_result
  when: 
    - cluster_membership_exists
    - wallix_cleanup.operation_mode | default('dry_run') == 'normal'
    - wallix_cleanup_components.clusters.reset_config | default(true)

- name: "Cleanup | Cluster | Set cleanup statistics"
  set_fact:
    wallix_cleanup_stats:
      clusters:
        found: "{{ cluster_list | length }}"
        cluster_membership: "{{ cluster_membership_exists }}"
        left_clusters: "{{ cluster_leave_results.results | selectattr('changed', 'equalto', true) | list | length if cluster_leave_results is defined else 0 }}"
        destroyed_clusters: "{{ cluster_destroy_results.results | selectattr('changed', 'equalto', true) | list | length if cluster_destroy_results is defined else 0 }}"
        config_reset: "{{ cluster_config_reset_result.changed | default(false) }}"
        backed_up: "{{ cluster_membership_exists and (wallix_cleanup_backup.enabled | default(true)) }}"