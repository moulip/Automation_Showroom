---
# WALLIX Config - Cluster Target Configuration Tasks  
# Manages PAM cluster targets via /api/clusters (NOT HA infrastructure)

- name: "Config | Cluster | Get current cluster targets"
  uri:
    url: "{{ wallix_api_base_url }}/api/clusters"
    method: GET
    headers:
      Cookie: "{{ wallix_api_session_cookie | default('') }}"
      Authorization: "Bearer {{ wallix_api_token | default('') }}"
    validate_certs: "{{ wallix_auth.connection.verify_ssl | default(true) }}"
    timeout: "{{ wallix_auth.connection.timeout | default(30) }}"
    status_code: [200, 404]
  register: current_cluster_targets
  changed_when: false
  failed_when: false

- name: "Config | Cluster | Debug current cluster targets"
  debug:
    msg: "Current cluster targets: {{ current_cluster_targets.json | default('No clusters configured') }}"
  when: wallix_config_debug.enabled | default(false)

- name: "Config | Cluster | Check if cluster management is required"
  set_fact:
    cluster_management_required: >-
      {{
        wallix_cluster_targets is defined and
        wallix_cluster_targets | length > 0
      }}

# === CLUSTER TARGET CREATION ===
- name: "Config | Cluster | Create cluster targets"
  uri:
    url: "{{ wallix_api_base_url }}/api/clusters"
    method: POST
    headers:
      Cookie: "{{ wallix_api_session_cookie | default('') }}"
      Authorization: "Bearer {{ wallix_api_token | default('') }}"
      Content-Type: "application/json"
    body:
      cluster_name: "{{ cluster_item.cluster_name }}"
      cluster_description: "{{ cluster_item.cluster_description | default('PAM cluster target managed by Ansible') }}"
      cluster_type: "{{ cluster_item.cluster_type | default('database') }}"  # database, application, service
      
      # Cluster target endpoints
      cluster_endpoints: "{{ cluster_item.cluster_endpoints | default([]) }}"
      
      # Load balancing settings
      load_balancing_method: "{{ cluster_item.load_balancing_method | default('round_robin') }}"  # round_robin, failover, weighted
      connection_policy: "{{ cluster_item.connection_policy | default('failover') }}"  # failover, load_balance
      
      # Health check settings
      health_check_enabled: "{{ cluster_item.health_check_enabled | default(true) }}"
      health_check_interval: "{{ cluster_item.health_check_interval | default(30) }}"
      health_check_timeout: "{{ cluster_item.health_check_timeout | default(10) }}"
      health_check_retries: "{{ cluster_item.health_check_retries | default(3) }}"
      
      # Connection settings
      max_connections_per_node: "{{ cluster_item.max_connections_per_node | default(10) }}"
      connection_timeout: "{{ cluster_item.connection_timeout | default(30) }}"
      
      # Credentials and authentication
      cluster_domain: "{{ cluster_item.cluster_domain | default('') }}"
      authentication_method: "{{ cluster_item.authentication_method | default('password') }}"
      
      # Tags and metadata
      tags: "{{ cluster_item.tags | default([]) }}"
      metadata: "{{ cluster_item.metadata | default({}) }}"
    body_format: json
    validate_certs: "{{ wallix_auth.connection.verify_ssl | default(true) }}"
    timeout: "{{ wallix_auth.connection.timeout | default(60) }}"
    status_code: [200, 201, 409]
  register: cluster_create_result
  loop: "{{ wallix_cluster_targets }}"
  loop_control:
    loop_var: cluster_item
  when: 
    - cluster_management_required
    - wallix_config_mode | default('normal') == 'normal'

- name: "Config | Cluster | Create cluster targets (dry run)"
  debug:
    msg: 
      - "Would create cluster target: {{ cluster_item.cluster_name }}"
      - "Type: {{ cluster_item.cluster_type | default('database') }}"
      - "Endpoints: {{ cluster_item.cluster_endpoints | default([]) }}"
      - "Load Balancing: {{ cluster_item.load_balancing_method | default('round_robin') }}"
  loop: "{{ wallix_cluster_targets }}"
  loop_control:
    loop_var: cluster_item
  when: 
    - cluster_management_required
    - wallix_config_mode | default('normal') == 'dry_run'

# === CLUSTER TARGET UPDATE ===
- name: "Config | Cluster | Get specific cluster target for update"
  uri:
    url: "{{ wallix_api_base_url }}/api/clusters/{{ cluster_item.cluster_name }}"
    method: GET
    headers:
      Cookie: "{{ wallix_api_session_cookie | default('') }}"
      Authorization: "Bearer {{ wallix_api_token | default('') }}"
    validate_certs: "{{ wallix_auth.connection.verify_ssl | default(true) }}"
    timeout: "{{ wallix_auth.connection.timeout | default(30) }}"
    status_code: [200, 404]
  register: cluster_details
  loop: "{{ wallix_cluster_targets }}"
  loop_control:
    loop_var: cluster_item
  when: 
    - cluster_management_required
    - cluster_item.update_cluster | default(false)

- name: "Config | Cluster | Update cluster targets"
  uri:
    url: "{{ wallix_api_base_url }}/api/clusters/{{ cluster_item.cluster_name }}"
    method: PUT
    headers:
      Cookie: "{{ wallix_api_session_cookie | default('') }}"
      Authorization: "Bearer {{ wallix_api_token | default('') }}"
      Content-Type: "application/json"
    body:
      cluster_description: "{{ cluster_item.cluster_description | default(cluster_details.results[ansible_loop.index0].json.cluster_description) }}"
      cluster_endpoints: "{{ cluster_item.cluster_endpoints | default(cluster_details.results[ansible_loop.index0].json.cluster_endpoints) }}"
      load_balancing_method: "{{ cluster_item.load_balancing_method | default(cluster_details.results[ansible_loop.index0].json.load_balancing_method) }}"
      health_check_enabled: "{{ cluster_item.health_check_enabled | default(cluster_details.results[ansible_loop.index0].json.health_check_enabled) }}"
      health_check_interval: "{{ cluster_item.health_check_interval | default(cluster_details.results[ansible_loop.index0].json.health_check_interval) }}"
      max_connections_per_node: "{{ cluster_item.max_connections_per_node | default(cluster_details.results[ansible_loop.index0].json.max_connections_per_node) }}"
    body_format: json
    validate_certs: "{{ wallix_auth.connection.verify_ssl | default(true) }}"
    timeout: "{{ wallix_auth.connection.timeout | default(60) }}"
    status_code: [200, 204]
  register: cluster_update_result
  loop: "{{ wallix_cluster_targets }}"
  loop_control:
    loop_var: cluster_item
    extended: true
  when: 
    - cluster_management_required
    - cluster_item.update_cluster | default(false)
    - cluster_details is defined
    - cluster_details.results[ansible_loop.index0].status == 200
    - wallix_config_mode | default('normal') == 'normal'

# === CLUSTER TARGET VALIDATION ===
- name: "Config | Cluster | Validate cluster targets health"
  uri:
    url: "{{ wallix_api_base_url }}/api/clusters/{{ cluster_item.cluster_name }}/health"
    method: GET
    headers:
      Cookie: "{{ wallix_api_session_cookie | default('') }}"
      Authorization: "Bearer {{ wallix_api_token | default('') }}"
    validate_certs: "{{ wallix_auth.connection.verify_ssl | default(true) }}"
    timeout: "{{ wallix_auth.connection.timeout | default(30) }}"
    status_code: [200]
  register: cluster_health_result
  changed_when: false
  loop: "{{ wallix_cluster_targets }}"
  loop_control:
    loop_var: cluster_item
  when: 
    - cluster_management_required
    - cluster_item.validate_cluster_health | default(true)
    - (cluster_create_result is defined and cluster_create_result.changed) or
      (cluster_update_result is defined and cluster_update_result.changed)

# === STATUS REPORTING ===
- name: "Config | Cluster | Set cluster configuration status"
  set_fact:
    wallix_cluster_targets_created: "{{ cluster_create_result.results | selectattr('changed') | list | length if cluster_create_result is defined else 0 }}"
    wallix_cluster_targets_updated: "{{ cluster_update_result.results | selectattr('changed') | list | length if cluster_update_result is defined else 0 }}"
    wallix_cluster_targets_healthy: "{{ cluster_health_result.results | selectattr('status', 'eq', 200) | list | length if cluster_health_result is defined else 'unknown' }}"
    wallix_cluster_config_time: "{{ ansible_date_time.iso8601 }}"

- name: "Config | Cluster | Log cluster configuration result"
  debug:
    msg:
      - "Cluster Target Configuration Summary:"
      - "  - Created: {{ wallix_cluster_targets_created }}"
      - "  - Updated: {{ wallix_cluster_targets_updated }}"
      - "  - Healthy: {{ wallix_cluster_targets_healthy }}"
      - "  - Total Configured: {{ wallix_cluster_targets | length if wallix_cluster_targets is defined else 0 }}"
      - "  - Timestamp: {{ wallix_cluster_config_time }}"
  when: wallix_config_debug.enabled | default(false)